@* <div class="sidebar flex min-h-screen w-60"> *@
@*     <div class="sidebar-inner p-6 slimscrollk" style="overflow: hidden; width: 100%; height: 695px;"> *@
@*         <div class="sidebar-menu" > *@
@*                 <ul> *@
@*                     @foreach (var item in _menuItems) *@
@*                     { *@
@*                     <li class="submenu-open"> *@
@*                         <h6 class="submenu-hdr" style="color: #FFFFFF">@item.Title</h6> *@
@*                         <ul> *@
@*                             @foreach (var subItem in item.SubMenuItems) *@
@*                             { *@
@*                             <li class="submenu my-3"> *@
@*                                 <a href="@subItem.Url" class="@GetSubMenuCss(subItem) flex flex-row" @onclick="() => ToggleSubMenu(subItem)"> *@
@*                                     @if (!string.IsNullOrEmpty(subItem.Icon)) *@
@*                                     { *@
@*                                         <FeatherMenu Size="26" Color="#FFFFFF" StrokeWidth="1.2f"/> *@
@*                                         $1$ <i data-feather="@subItem.Icon"></i> #1# *@
@*                                         $1$ <span>@subItem.Icon</span> #1# *@
@*                                     } *@
@*                                      *@
@*                                     <span class="text-lg">@subItem.Title</span> *@
@*                                     @if (subItem.IsSubmenu) *@
@*                                     { *@
@*                                     <span class="menu-arrow"></span> *@
@*                                     } *@
@*                                 </a> *@
@* *@
@*                                 @if (subItem.IsSubmenu && subItem.SubMenuItems != null) *@
@*                                 { *@
@*                                 <ul class="bg-[#141432] rounded px-0 py-[10px]" style="@GetDisplayStyle(subItem)"> *@
@*                                     @foreach (var nestedItem in subItem.SubMenuItems) *@
@*                                     { *@
@*                                         <li class="flex items-center p-2 text-gray-400 hover:text-white"> *@
@*                                             <div class="h-2 w-2 rounded-full bg-gray-400 mr-2"></div> *@
@*                                             <a href="@nestedItem.Url" class="@GetActiveClass(nestedItem)">@nestedItem.Title</a> *@
@*                                         </li> *@
@*                                          *@
@*                                     } *@
@*                                 </ul> *@
@*                                 } *@
@*                             </li> *@
@*                             } *@
@*                         </ul> *@
@*                     </li> *@
@*                     } *@
@*                 </ul> *@
@*         </div> *@
@*     </div> *@
@* </div> *@
<div class="hidden lg:fixed lg:inset-y-0 lg:z-50 lg:flex lg:w-72 lg:flex-col">
    <!-- Sidebar component, swap this element with another sidebar if you like -->
    <div class="flex grow flex-col gap-y-5 overflow-y-auto bg-gray-900 px-6 pb-4 sidebar">
        <div class="flex h-16 shrink-0 items-center">
            <h2 class="text-white">PoshPointHub</h2>
        </div>
        <nav class="flex flex-1 flex-col">
            <ul class="flex flex-1 flex-col gap-y-7" role="list">
                                    @foreach (var item in _menuItems)
                                    {
                                    <li class="submenu-open">
                                        @* <h6 class="submenu-hdr" style="color: #FFFFFF">@item.Title</h6> *@
                                        <ul class="-mx-2 space-y-1">
                                            @foreach (var subItem in item.SubMenuItems)
                                            {
                                            <li class="submenu my-3">
                                                <a href="@subItem.Url" class="@GetSubMenuCss(subItem) flex flex-row" @onclick="() => ToggleSubMenu(subItem)">
                                                    @if (!string.IsNullOrEmpty(subItem.Icon))
                                                    {
                                                        <FeatherMenu Size="26" Color="#FFFFFF" StrokeWidth="1.2f"/>
                                                        @* <i data-feather="@subItem.Icon"></i> *@
                                                        @* <span>@subItem.Icon</span> *@
                                                    }
                
                                                    <span class="text-lg">@subItem.Title</span>
                                                    @if (subItem.IsSubmenu)
                                                    {
                                                    <span class="menu-arrow"></span>
                                                    }
                                                </a>
                
                                                @if (subItem.IsSubmenu && subItem.SubMenuItems != null)
                                                {
                                                <ul class="bg-[#141432] rounded px-0 py-[10px]" style="@GetDisplayStyle(subItem)">
                                                    @foreach (var nestedItem in subItem.SubMenuItems)
                                                    {
                                                        <li class="flex items-center p-2 text-gray-400 hover:text-white">
                                                            <div class="h-2 w-2 rounded-full bg-gray-400 mr-2"></div>
                                                            <a href="@nestedItem.Url" class="@GetActiveClass(nestedItem)">@nestedItem.Title</a>
                                                        </li>
                
                                                    }
                                                </ul>
                                                }
                                            </li>
                                            }
                                        </ul>
                                    </li>
                                    }
                                </ul>
        </nav>
    </div>
</div>

    @code {
        public class MenuItem
        {
            public string Title { get; set; }
            public string Icon { get; set; }
            public string Url { get; set; } = "javascript:void(0);"; // Default URL for submenus
            public bool IsSubmenu { get; set; }
            public bool IsActive { get; set; }
            public bool IsOpen { get; set; }
            public List<MenuItem>? SubMenuItems { get; set; } // Submenu items, if any
        }
        
        private bool IsMiniSidebar { get; set; } = true;  // Represents if the sidebar is in "mini" mode
        private bool IsToggleButtonVisible { get; set; } = true;  // You can determine visibility based on your layout
        private bool IsMouseOverSidebar { get; set; } = false;  // Represents whether the mouse is over the sidebar
        private bool IsExpandMenu { get; set; } = false;  // Tracks if the menu should expand

    // Define the menu structure
    private List<MenuItem> _menuItems =
    [
        new MenuItem
        {
            Title = "Main",
            IsSubmenu = true,
            SubMenuItems =
            [
                new MenuItem
                {
                    Title = "Dashboard",
                    Icon = " <svg class=\"h-6 w-6 shrink-0\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" aria-hidden=\"true\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M2.25 12l8.954-8.955c.44-.439 1.152-.439 1.591 0L21.75 12M4.5 9.75v10.125c0 .621.504 1.125 1.125 1.125H9.75v-4.875c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21h4.125c.621 0 1.125-.504 1.125-1.125V9.75M8.25 21h8.25\" />\n                      </svg>",
                    IsSubmenu = true,
                    IsOpen = true,
                    SubMenuItems =
                    [
                        new MenuItem { Title = "Admin Dashboard", Url = "weather", IsActive = true },
                        new MenuItem { Title = "Sales Dashboard", Url = "counter" },
                        new MenuItem { Title = "Home Dashboard", Url = "/" }
                    ]
                },

                new MenuItem
                {
                    Title = "Application",
                    Icon = "smartphone",
                    IsSubmenu = true,
                    SubMenuItems =
                    [
                        new MenuItem { Title = "Chat", Url = "chat.html" },
                        new MenuItem { Title = "Calendar", Url = "calendar.html" },
                        new MenuItem { Title = "Email", Url = "email.html" },
                        new MenuItem { Title = "To Do", Url = "todo.html" },
                        new MenuItem { Title = "Notes", Url = "notes.html" },
                        new MenuItem { Title = "File Manager", Url = "file-manager.html" }
                    ]
                }
            ]
        },

        new MenuItem
        {
            Title = "Inventory",
            IsSubmenu = false,
            SubMenuItems = [new MenuItem { Title = "Products", Icon = "box", Url = "product-list.html" }]
        },

        new MenuItem
        {
            Title = "Stock",
            IsSubmenu = false,
            SubMenuItems =
            [
                new MenuItem { Title = "Manage Stock", Icon = "package", Url = "manage-stocks.html" },
                new MenuItem { Title = "Stock Adjustment", Icon = "clipboard", Url = "stock-adjustment.html" },
                new MenuItem { Title = "Stock Transfer", Icon = "truck", Url = "stock-transfer.html" }
            ]
        }
    ];

    private void ToggleSubMenu(MenuItem item)
    {
        // Check if the clicked submenu is already open
        if (item.IsOpen)
        {
            // Close it if it is already open
            item.IsOpen = false;
        }
        else
        {
            // If it's not open, close all other submenus and open this one
            CloseAllSubMenus();
            item.IsOpen = true;
        }
    }

    private void CloseAllSubMenus()
    {
        foreach (var menuItem in _menuItems)
        {
            if (menuItem.SubMenuItems != null)
            {
                foreach (var subMenuItem in menuItem.SubMenuItems)
                {
                    subMenuItem.IsOpen = false; // Close the submenu
                }
            }
        }
    }

    private string GetSubMenuCss(MenuItem item)
    {
        return item.IsOpen ? "subdrop active" : string.Empty;
    }

    private string GetDisplayStyle(MenuItem item)
    {
        return item.IsOpen ? "display: block;" : "display: none;";
    }

    private string GetActiveClass(MenuItem item)
    {
        return item.IsActive ? "active" : string.Empty;
    }
    
    // Method to handle mouseover event
    private void OnMouseOver(MouseEventArgs e)
    {
        if (!IsMiniSidebar || !IsToggleButtonVisible) return;
        IsMouseOverSidebar = true;
        ExpandMenu();
    }

    // Method to handle mouseout event
    private void OnMouseOut(MouseEventArgs e)
    {
        if (IsMiniSidebar && IsToggleButtonVisible)
        {
            IsMouseOverSidebar = false;
            CollapseMenu();
        }
    }

    // Expand the menu
    private void ExpandMenu()
    {
        IsExpandMenu = true;
        // Additional logic to display submenu or make UI changes can be handled here
    }

    // Collapse the menu
    private void CollapseMenu()
    {
        IsExpandMenu = false;
        // Additional logic to hide submenu or make UI changes can be handled here
    }

    // Determines the CSS class to apply based on whether the menu is expanded
    private string GetBodyCssClass()
    {
        return IsExpandMenu ? "expand-menu" : string.Empty;
    }
}
